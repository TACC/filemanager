/* 
 * Created on Aug 6, 2008
 * 
 * Developed by: Rion Dooley - dooley [at] tacc [dot] utexas [dot] edu
 * 				 TACC, Texas Advanced Computing Center
 * 
 * https://www.tacc.utexas.edu/
 */

package org.teragrid.portal.filebrowser.applet.file;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.alfresco.model.ContentModel;
import org.alfresco.service.cmr.repository.ContentData;
import org.alfresco.service.cmr.security.AccessPermission;
import org.alfresco.service.namespace.QName;
import org.globus.ftp.FileInfo;
import org.globus.ftp.exception.FTPException;
import org.teragrid.portal.filebrowser.applet.ConfigOperation;
import org.teragrid.portal.filebrowser.applet.util.LogManager;

import com.rivetlogic.core.cma.api.SecurityService;
import com.rivetlogic.core.cma.repo.Node;

/**
 * Extension class to map TeraGrid $SHARE ACLs to unix file permissions. $SHARE
 * nodes have 4 AC levels:
 * 
 * @author Rion Dooley < dooley [at] tacc [dot] utexas [dot] edu >
 * 
 */
public class TGShareFileInfo extends FileInfo implements GenericFileInfo {

	public static final String CONSUMER = "Consumer";
	public static final String EDITOR = "Editor";
	public static final String CONTRIBUTOR = "Contributor";
	public static final String COLLABORATOR = "Collaborator";
	public static final String COORDINATOR = "Coordinator";

	private String nodeRefId = "";

	private int mode = 0;

	private Map<String,Integer> permissionMap;

	private boolean versioned = false;
	
	public TGShareFileInfo() {
		super();
	}

	public TGShareFileInfo(Node node) {
		setName(getName(node));
		setSize(getSize(node));
		setDate(new SimpleDateFormat("MMM dd").format(getModified(node)));
		setTime(new SimpleDateFormat("HH:mm").format(getModified(node)));
		setFileType(getFileType(node));
		setPermissions(node.getPermissions());
		setVersioned(node);
		this.nodeRefId = node.getNodeRef().getId();
	}

	public void setMode(int mode) {
		this.mode = mode;
	}

	@SuppressWarnings("unchecked")
	public void setPermissions(Object permissions) {
		String username = ConfigOperation.getInstance().getConfigValue("username");
		
		this.permissionMap = new HashMap<String,Integer>();
		
		
		for (AccessPermission permission: (Set<AccessPermission>)permissions) {
			String uname = permission.getAuthority();
			if (uname.equals(username) || uname.equals("ROLE_OWNER")) {
				uname = "you";
			} else if (uname.equals("GROUP_EVERYONE")) {
				uname = "everyone";
			}
			
			if (permissionMap.containsKey(uname)) {
				
				permissionMap.put(uname, updateValue(permissionMap.get(uname),permission.getPermission()));
			} else {
				permissionMap.put(uname, updateValue(0,permission.getPermission()));
			}
		}
		// setting mode is handy for the listing display, but really need to 
		// create a map of usernames and unix permission values.  Doing this
		// makes it easy to populate the permissions file info table.
		
		this.mode = 0;
		
		// TODO:  May have to filter out this user's permissions from the other 
		// users since they may not be the owner and owner permissions may not
		// be returned with the file listing.
		
		String unixPems = "";
		if (permissionMap.size() > 0) {
			unixPems = (isDirectory()?"d":"-") +
						  parsePermissions("you") + 
						  parsePermissions("group") + 
						  parsePermissions(null);
		} else {
			unixPems = "dr--------";
		}
		
		try {
			for (int i = 1; i <= 9; i++) {
				if (unixPems.charAt(i) != '-') {
					mode += 1 << (9 - i);
				}
			}
		} catch (IndexOutOfBoundsException e) {
			LogManager.error("Failed to set $SHARE permissions.", new FTPException(FTPException.UNSPECIFIED,
					"Could not parse access permission bits"));
		}		
	}
	
	private Integer updateValue(Integer oldVal, String authTypeName) {
		if (oldVal.intValue() == 7 || authTypeName.equalsIgnoreCase("All") || 
				authTypeName.equals(SecurityService.COORDINATOR)) {
			return new Integer(7);
		} else if (oldVal.intValue() == 6 || 
				authTypeName.equals(SecurityService.EDITOR) || 
				authTypeName.equals(SecurityService.CONTRIBUTOR) ||
				authTypeName.equals("Collaborator")) {
			return new Integer(6);
		} else if (authTypeName.equals(SecurityService.CONSUMER)) {
			return new Integer(oldVal.intValue() >= 6?oldVal:4);
		} 
		
		return null;
	}

	private String parsePermissions(String authority) {
		char[] unixPems = "---".toCharArray();
		if (authority != null) {
			if (permissionMap.containsKey(authority)) { 
				return resolvePermissionValue(permissionMap.get(authority));
			} else {
				return "---";
			}
		} else {
			for (String key: permissionMap.keySet()) {
				if (key.equals("you") || key.equals("group")) {
				} else {
					if (permissionMap.get(key).intValue() == 7) {
						return "rwx";
					} else if (permissionMap.get(key).intValue() == 4) {
						unixPems[0] = 'r';
					} else if (permissionMap.get(key).intValue() == 6) {
						unixPems[1] = 'w';
						unixPems[0] = 'r';
					}
				} 
			}
		}
		return new String(unixPems);
	}

	private String resolvePermissionValue(int val) {
		if (val == 7) {
			return "rwx";
		} else if (val == 4) {
			return "r--";
		} else if (val == 6) {
			return "rw-";
		} else return "---";
	}
	
	public Object getPermissions() {
		return this.permissionMap;
	}

	public int getMode() {
		return mode;
	}

	public String getModeAsString() {
		StringBuffer modeStr = new StringBuffer();
		for (int j = 2; j >= 0; j--) {
			int oct = 0;
			for (int i = 2; i >= 0; i--) {
				if ((mode & (1 << j * 3 + i)) != 0) {
					oct += (int) Math.pow(2, i);
				}
			}
			modeStr.append(String.valueOf(oct));
		}
		return modeStr.toString();
	}

	public boolean userCanRead() {
		return ((mode & (1 << 8)) != 0);
	}

	public boolean userCanWrite() {
		return ((mode & (1 << 7)) != 0);
	}

	public boolean userCanExecute() {
		return ((mode & (1 << 6)) != 0);
	}

	public boolean groupCanRead() {
		return ((mode & (1 << 5)) != 0);
	}

	public boolean groupCanWrite() {
		return ((mode & (1 << 4)) != 0);
	}

	public boolean groupCanExecute() {
		return ((mode & (1 << 3)) != 0);
	}

	public boolean allCanRead() {
		return ((mode & (1 << 2)) != 0);
	}

	public boolean allCanWrite() {
		return ((mode & (1 << 1)) != 0);
	}

	public boolean allCanExecute() {
		return ((mode & (1 << 0)) != 0);
	}

	public boolean isVersioned() {
		return versioned;
	}
	private void setVersioned(Node node) {
		versioned = node.getAspects().contains(ContentModel.ASPECT_VERSIONABLE);
	}
	public String getName(Node node) {
		return (String) node
				.getProperties()
				.get(
						QName
								.createQName("{http://www.alfresco.org/model/content/1.0}name"));
	}

	public Date getModified(Node node) {
		return (Date) node
				.getProperties()
				.get(
						QName
								.createQName("{http://www.alfresco.org/model/content/1.0}modified"));
	}

	public Long getSize(Node node) {
		ContentData cd = (ContentData) node.getProperties().get(
				ContentModel.PROP_CONTENT);
		long size = 0L;
		if (cd != null) {
			size = cd.getSize();
		}

		return size;
	}

	public byte getFileType(Node node) {
		if (node
				.getType()
				.equals(
						QName
								.createQName("{http://www.alfresco.org/model/content/1.0}content"))) {
			return FILE_TYPE;
		} else if (node
				.getType()
				.equals(
						QName
								.createQName("{http://www.alfresco.org/model/content/1.0}folder"))) {
			return DIRECTORY_TYPE;
		} else if (node.getType().equals(QName.createQName("{http://www.alfresco.org/model/content/1.0}filelink")) || 
				node.getType().equals(QName.createQName("{http://www.alfresco.org/model/content/1.0}folderlink"))) {
			return SOFTLINK_TYPE;
		} else {
			return UNKNOWN_TYPE;

		}

	}

	public String getNodeRefId() {
		return this.nodeRefId;
	}
}