/* 
 * Created on Jul 23, 2008
 * 
 * Developed by: Rion Dooley - dooley [at] tacc [dot] utexas [dot] edu
 * 				 TACC, Texas Advanced Computing Center
 * 
 * https://www.tacc.utexas.edu/
 */

package org.teragrid.portal.filebrowser.applet.transfer;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.MalformedURLException;
import java.util.List;
import java.util.Vector;

import org.alfresco.service.cmr.repository.NodeRef;
import org.alfresco.service.cmr.version.Version;
import org.alfresco.service.cmr.version.VersionHistory;
import org.globus.ftp.FTPClient;
import org.globus.ftp.HostPort;
import org.globus.ftp.exception.ClientException;
import org.globus.ftp.exception.ServerException;
import org.globus.ftp.vanilla.Reply;
import org.teragrid.portal.filebrowser.applet.ConfigOperation;
import org.teragrid.portal.filebrowser.applet.file.TGShareFileInfo;
import org.teragrid.portal.filebrowser.applet.util.LogManager;
import org.teragrid.portal.filebrowser.server.servlet.exception.AuthenticationException;
import org.teragrid.portal.filebrowser.server.servlet.exception.PermissionException;
import org.teragrid.service.share.client.TGShareClient;

import com.rivetlogic.core.cma.api.SecurityService;
import com.rivetlogic.core.cma.repo.Node;

/**
 * Adaptor class to interface with TeraGrid $SHARE
 * 
 * @author Rion Dooley < dooley [at] tacc [dot] utexas [dot] edu >
 *
 */
@SuppressWarnings({"unchecked","unused"})
public class TGShare extends FTPClient {
    
    public static String Prefix = "http://";

    private TGShareClient client;
    
    private String pwd = null;
    
    private NodeRef pwdNodeRef = null;
    
    /**
     * @param username
     * @param username
     * @throws IOException
     * @throws ServerException
     */
    public TGShare(String username, String password) {
    	authorize(username,password);
    	this.username = username;
    	ConfigOperation.getInstance().setConfigValue("username",username);
    }

    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#abort()
     */
    @Override
    public void abort() throws IOException, ServerException {
        client.logoff();
    }

    public void setType(int type) throws IOException, ServerException {}
    public HostPort setPassive() throws IOException, ServerException {return null;}
    public void setActive(HostPort hostPort){}
    public void setActive(){}
    public void setLocalActive() throws ClientException, IOException {}
    public HostPort setLocalPassive() throws IOException {return null;}
    public HostPort setLocalPassive(int port, int queue) throws IOException {return null;}
    
    /* 
     * Establish a connection to TeraGrid $SHARE under the user's account.
     * 
     * @param username the teragrid username
     * @param password the teragrid password
     */
    public void authorize(String username, String password) {
    	try {
	    	client = new TGShareClient(username,password);
	    	
	        client.login();
    	} catch (Exception e) {
    		if (e.getMessage().indexOf("ticket cannot be null") > 1) {
    			throw new AuthenticationException("Incorrect username/password combination");
    		}
    	}
    }

    /* 
     * Close the connection to s3. Since HTTPUrlConnection are used, this is 
     * empty.
     */
    @Override
    public void close() throws IOException, ServerException {
//        client.logoff();
    }

    /* 
     * Delete the bucket named 'dir'
     * @param bucket bucket to delete
     */
    @Override
    public void deleteDir(String dirName) throws IOException, ServerException {
        try {
            client.remove(getPath(dirName));
        } catch (Exception e) {
            throw new ServerException(0,"Failed to delete directory: " + e.getMessage());
        }
    }

    /* 
     * Delete the file with key equal to the filename in the current bucket
     * @param filename
     */
    @Override
    public void deleteFile(String fileName) throws IOException, ServerException {
    	try {
            client.remove(getPath(fileName));
        } catch (Exception e) {
            throw new ServerException(0,"Failed to delete file: " + e.getMessage());
        }
    }

    public void copyFile(String srcPath, String destPath) throws IOException, ServerException {
            LogManager.debug("from: " + srcPath + " to: " + destPath);
            
            if (destPath.equals(srcPath)) {
                return;
            }
            
            try {
				client.copy(srcPath, destPath);
			} catch (Exception e) {
				throw new ServerException(0,"Failed to copy file to " + destPath);
			}
            
    }

    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#get(java.lang.String, java.io.File)
     */
    @Override
    public void get(String remoteFileName, File localFile) throws IOException,
            ClientException, ServerException {
    	FileOutputStream outstream = new FileOutputStream(localFile);
        try {
			client.get(getPath(remoteFileName), outstream);
		} catch (Exception e) {
			throw new ServerException(0,"Failed to retrieve file " + 
                    remoteFileName + ": " + e.getMessage());
		}
    }
    
    public void get(String remoteFileName, OutputStream outstream) throws IOException,
	    	ClientException, ServerException {
		try {
			client.get(getPath(remoteFileName), outstream);
		} catch (Exception e) {
			throw new ServerException(0,"Failed to retrieve file " + 
		            remoteFileName + ": " + e.getMessage());
		}
	}

    public InputStream getInputStream(String remoteFileName) throws MalformedURLException, IOException {
        return new FileInputStream("");
    }
    
    public OutputStream getOutputStream(String remoteFileName, long length) throws MalformedURLException, IOException {
    	return new FileOutputStream("");
    }
    /*
     * The last directory listed.
     * 
     * @return current bucket
     */
    @Override
    public String getCurrentDir() throws IOException, ServerException {
    	if (pwd == null) {
        	pwd = "";
    	}
    	return pwd.replaceAll("//", "/");
    }

    /* 
     * Static host of TeraGrid $SHARE
     */
    @Override
    public String getHost() {
        return client.getHost();
    }

    /* 
     * Find size of repository file.
     * 
     * @param filename name of file in current bucket
     */
    @Override
    public long getSize(String fileName) throws IOException, ServerException {
        try {
            return client.getSize(getPath(fileName));
        } catch (Exception e) {
            throw new ServerException(0,"Failed to get file size: " + e.getMessage());
        }
    }

    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#getUserName()
     */
    public String getUserName() {
        
        return this.username;
        
    }

    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#goUpDir()
     */
    @Override
    public void goUpDir() throws IOException, ServerException {
        changeDir("..");
    }

    
    /* 
     * s3 does not support directories, so the changedir command essentially
     * just switches buckets
     * @param dir directory to which to change
     */
    @Override
    public void changeDir(String dir) throws IOException, ServerException {
        
        try {
			pwdNodeRef = client.getNode(getPath(dir)).getNodeRef();
			pwd = getPath(dir);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ServerException(0,"Failed to change directory to " + 
                    pwd + ": " + e.getMessage());
		}
        
    }

    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#list()
     */
    
	@Override
    public Vector list() throws ServerException, ClientException, IOException {
        
        Vector v = new Vector();
        
        try {
            List<Node> nodes = client.list(getPath(pwd));
            for (Node node: nodes) {
                TGShareFileInfo file = new TGShareFileInfo(node);
                v.add(file);
            }
        } catch (IllegalArgumentException e) {
        	throw new PermissionException("Incorrect username/password combination.");
        } catch (Exception e) {
        	e.printStackTrace();
        	throw new ServerException(0,"Failed to list directory " + 
	                    pwd);// + ": " + e.getMessage());
        }
        
        return v;
    }

    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#list(java.lang.String)
     */
    @Override
    public Vector list(String filter) throws ServerException, ClientException,
            IOException {
    	return list();
    }

    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#makeDir(java.lang.String)
     */
    @Override
    public void makeDir(String dir) throws IOException, ServerException {
        try {
            client.mkdir(client.getNode(getCurrentDir()).getNodeRef(), dir);
        } catch (Exception e) {
            throw new ServerException(0,"Failed to create the directory: " + e.getMessage());
        }
    }

    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#put(java.io.File, java.lang.String, boolean)
     */
    @Override
    public void put(File localFile, String remoteFileName, boolean append)
    throws IOException, ServerException, ClientException {
        try {
            client.put(getPath(remoteFileName), remoteFileName, new FileInputStream(localFile));
        } catch (Exception e) {
            throw new IOException("Failed to store the file: " + e.getMessage());
        }
    }
    
    
    public void put(InputStream instream, String remoteFileName, boolean append)
    throws IOException, ServerException, ClientException {
		try {
			File newFile = new File(remoteFileName);
			client.put(newFile.getParentFile().getAbsolutePath(), newFile.getName(), instream);
		} catch (Exception e) {
		    throw new IOException("Failed to store the file: " + e.getMessage());
		}
	}
    
    public String getUrl(String path) throws Exception {
    	return client.getUrl(getPath(path)).toString();
    }


    /* (non-Javadoc)
     * @see org.globus.ftp.FTPClient#rename(java.lang.String, java.lang.String)
     */
    @Override
    public void rename(String oldName, String newName) throws IOException,
            ServerException {
    	try {
    		client.rename(getPath(oldName), newName);
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new ServerException(0, "Failed to rename " + oldName);
    	}
    }
    
    public void copy(String srcPath, String destPath) throws IOException,
    ServerException {
    	try {
    		client.copy(srcPath, destPath.substring(0,destPath.lastIndexOf("/")));
    	} catch (Exception e) {
    		throw new ServerException(0, "Failed to copy " + srcPath);
    	}
    }

    /* 
     * Get the size of the named file.  Defaults to getSize(filename)
     * @param name of the file to get the size of
     */
    @Override
    public long size(String filename) throws IOException, ServerException {
        return getSize(filename);
    }    
    
    @Override
    public Reply site(String command) throws IOException, ServerException {
    	String[] args = command.split(" ");
    	String username = args[0];
    	int pemValue = Integer.parseInt(args[1]);

    	// path may have spaces in the title which would have broken the tokenizer
    	String path = "";
    	for (int i=2;i<args.length - 1;i++) {
    		path += args[i] + " ";
    	}
    	path = path.trim();

    	try {
    		int absValue = Math.abs(pemValue);
    		
    		String permission = "";

    		if (absValue == 7 || absValue == 5 || absValue == 1) {
    			permission = SecurityService.COORDINATOR;
    		} else if (absValue == 4) {
    			permission = SecurityService.CONSUMER;
    		} else if (absValue == 2 || absValue == 6) {
    			permission = SecurityService.EDITOR;
    		} 
    		
    		if (pemValue == 0) {
    			client.removeSharePermission(path, SecurityService.COORDINATOR, args[0]);
    			client.removeSharePermission(path, SecurityService.CONSUMER, args[0]);
    			client.removeSharePermission(path, SecurityService.EDITOR, args[0]);
    		} else if (pemValue > 0) {
    			client.addSharePermission(path, permission, args[0], Boolean.parseBoolean(args[3]));
    		} else {
    			client.removeSharePermission(path, permission, args[0]);
    		}
    		
    		return null;
    		
    	} catch (Exception e) {
    		e.printStackTrace(); 
    		throw new ServerException(0, "Failed to set permission " + args[1] + 
    				" for " + path);
    	}
    }
    
    /**
     * Set whether the node represented by the given path inherits the permissions of its parent 
     * folder.
     * 
     * @param path String path to node
     * @param inherits boolean flag does it inherit the parent permissions
     * @throws ServerException
     */
    public void setInheritsParentPermissions(String path, boolean inherits) throws ServerException {
    	try {
    		client.setInheritsParentPermissions(getPath(path), inherits);
    	} catch (Exception e) {
    		e.printStackTrace(); 
    		throw new ServerException(0, "Failed to set inherited permissions for " + path);
    	}
    }
    
    /**
     * Does the node represented by the path inherit the permissions of its parent folder.
     * 
     * @param path String path to node
     * @return boolean
     * @throws ServerException
     */
    public boolean getInheritsParentPermissions(String path) throws ServerException {
    	try {
    		return client.getInheritsParentPermissions(getPath(path));
    	} catch (Exception e) {
    		e.printStackTrace(); 
    		throw new ServerException(0, "Failed to set inherited permissions for " + path);
    	}
    }
    
    /**
     * Returns current version information for node at path.
     * 
     * @param path
     * @return Version object of node at path.
     * @throws ServerException
     */
    public Version getCurrentVersion(String path) throws ServerException {
    	try {
    		return client.getVersion(getPath(path));
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new ServerException(0, "Failed to retrieve version information for " + path);
    	}
    }
    
    public VersionHistory getVersionHistory(String path) throws ServerException {
    	try {
    		return client.getVersionHistory(getPath(path));
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new ServerException(0, "Failed to retrieve version information for " + path);
    	}
    }
    
    public void revertVersion(String path,Version version) throws ServerException {
    	try {
    		client.revertVersion(path, version);
    	} catch (Exception e) {
    		e.printStackTrace();
    		throw new ServerException(0, "Failed to rollback version to " + version.getVersionLabel());
    	}
    }
    public void enableVersioning(String path, boolean versionable) throws ServerException {
		try {
			client.enableVersioning(path, versionable);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ServerException(0, "Failed to " + (versionable?"enable":"disable") + " versioning for " + path);
		}
	}
    public void setVersionComment(String path, String comment) throws ServerException {
    	try {
			client.setVersionComment(path, comment);
		} catch (Exception e) {
			e.printStackTrace();
			throw new ServerException(0, "Failed to add version comment to " + path);
		}
    }
    
    public String getPath(String name) throws ServerException, IOException {
    	
    	if (name == null)
    		return getCurrentDir();
        
    	if (name.equals("")) {
    		return "/";
    	}
    	
    	name = name.replaceAll("//", "/");
        
    	if (name.equals("/public")) {
    		return "/public/" + username;
    	}
    	
        File currentDir = new File(getCurrentDir());
        
        if (name.endsWith("..")) {
        	try {
        		return currentDir.getParentFile().getAbsolutePath();
        	} catch (NullPointerException e) {
        		return getCurrentDir();
        	}
        }
        if (name.startsWith("/")) {
        	return name;
        } else {
        	return currentDir.getPath() + File.separator + name;
        }
    }
    
}
